import asyncio
import random
import time
import csv
from email.mime.text import MIMEText
import aiosmtplib
import os

# Configuration
SMTP_HOST = "localhost"
SMTP_PORT = 1025  # MailHog default port
FROM = "researcher@example.com"
TO = "victim@example.com"
EMAILS_PER_SECOND = 50  # Set how many emails per second
LOG_FILE = "email_log.csv"

# Ensure log file exists with headers
if not os.path.exists(LOG_FILE):
    with open(LOG_FILE, mode='w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(["Timestamp", "Subject", "Body"])

# Subject and body templates
subjects = [
    "Urgent Notice", "Limited Offer", "Security Alert",
    "Account Update", "Subscription Info", "Reminder",
    "Action Required", "Final Warning", "Limited Access", "Important Update"
]

bodies = [
    "This is a test message for spam filter research only.",
    "Alert: unusual activity was detected in your account.",
    "Reminder: Your subscription will expire in 24 hours.",
    "Please review your account settings and confirm your email.",
    "This is part of a controlled test for research purposes.",
    "Test email generated by automated system for analysis.",
    "No action required. This is a simulated message.",
    "Fake invoice generated for spam training dataset.",
    "New offer detected. Open to reveal fake content.",
    "Account security test. Ignore this fake alert."
]

# Create MIMEText email
def create_email(subject, body):
    msg = MIMEText(body, "plain", "utf-8")
    msg["From"] = FROM
    msg["To"] = TO
    msg["Subject"] = subject
    return msg

# Send one email
async def send_email(subject, body):
    message = create_email(subject, body)
    try:
        await aiosmtplib.send(
            message,
            hostname=SMTP_HOST,
            port=SMTP_PORT
        )
        # Log to CSV
        with open(LOG_FILE, mode='a', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow([time.strftime("%Y-%m-%d %H:%M:%S"), subject, body])
    except Exception as e:
        print(f"[!] Failed to send email: {e}")

# Send one batch
async def send_batch():
    tasks = []
    for _ in range(EMAILS_PER_SECOND):
        subject = random.choice(subjects)
        body = random.choice(bodies)
        tasks.append(send_email(subject, body))
    await asyncio.gather(*tasks)

# Main loop
async def flood_loop():
    print(f"[*] Starting email flood: {EMAILS_PER_SECOND}/sec")
    try:
        while True:
            start = time.time()
            await send_batch()
            elapsed = time.time() - start
            print(f"[+] Sent {EMAILS_PER_SECOND} emails in {elapsed:.2f} seconds")
            await asyncio.sleep(max(0, 1.0 - elapsed))  # maintain 1-second interval
    except KeyboardInterrupt:
        print("\n[!] Email flooding stopped by user.")

# Run the loop
if __name__ == "__main__":
    asyncio.run(flood_loop())
